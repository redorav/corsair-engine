#include "Rendering/ShaderCompiler/CrShaderCompiler_pch.h"

#include "CrShaderMetadataBuilder.h"
#include "CrShaderCompilerUtilities.h"

#include "CrShaderCompiler.h"
#include "CrCompilerDXC.h"

#include "Core/FileSystem/CrFixedPath.h"

#include "Rendering/CrRendering.h"

#include "spirv_reflect.h"

static const crstl::string AutoGeneratedDisclaimer =
"//------------------------------------------------------------------------\n"
"// This file was autogenerated by the Corsair Engine Shader Compiler.\n"
"// Modifying it will have no effect after the file is regenerated.\n"
"//------------------------------------------------------------------------\n\n";

static const crstl::string ConstantBufferSection =
"//-----------------\n"
"// Constant Buffers\n"
"//-----------------\n\n";

static const crstl::string SamplerSection =
"//---------\n"
"// Samplers\n"
"//---------\n\n";

static const crstl::string TextureSection =
"//---------\n"
"// Textures\n"
"//---------\n\n";

static const crstl::string RWTextureSection =
"//------------\n"
"// RW Textures\n"
"//------------\n\n";

static const crstl::string StorageBufferSection =
"//----------------\n"
"// Storage Buffers\n"
"//----------------\n\n";

static const crstl::string RWStorageBufferSection =
"//-------------------\n"
"// RW Storage Buffers\n"
"//-------------------\n\n";

static const crstl::string TypedBufferSection =
"//--------------\n"
"// Typed Buffers\n"
"//--------------\n\n";

static const crstl::string RWTypedBufferSection =
"//-----------------\n"
"// RW Typed Buffers\n"
"//-----------------\n\n";

bool CrShaderMetadataBuilder::BuildMetadata(const CompilationDescriptor& compilationDescriptor, crstl::string& compilationStatus)
{
	crstl::vector<uint32_t> spirvBytecode;
	bool compiled = CrCompilerDXC::HLSLtoSPIRV(compilationDescriptor, spirvBytecode, compilationStatus);

	if (!compiled)
	{
		return false;
	}

	crstl::string metadataHeader, metadataCpp;
	bool builtMetadata = BuildSPIRVMetadata(spirvBytecode, metadataHeader, metadataCpp, compilationStatus);

	if (!builtMetadata)
	{
		return false;
	}

	// Create header and cpp filenames
	CrFixedPath headerPath = compilationDescriptor.outputPath.c_str();
	CrShaderCompilerUtilities::WriteToFileIfChanged(headerPath.replace_extension("h").c_str(), metadataHeader);

	CrFixedPath cppPath = compilationDescriptor.outputPath.c_str();
	CrShaderCompilerUtilities::WriteToFileIfChanged(cppPath.replace_extension("cpp").c_str(), metadataCpp);

	// Write dummy file that tells the build system dependency tracker that files are up to date
	CrFixedPath uptodatePath = compilationDescriptor.outputPath.c_str();
	CrShaderCompilerUtilities::WriteToFile(uptodatePath.replace_extension("uptodate").c_str(), "");

	return true;
}

// This class translates GLSL resources to more HLSL-friendly resources. There are several
// odd things about the way GLSL treats buffers that doesn't map entirely to HLSL
struct HLSLResources
{
	HLSLResources(const SpvReflectShaderModule& reflection)
	{
		for (uint32_t i = 0; i < reflection.descriptor_binding_count; ++i)
		{
			const SpvReflectDescriptorBinding& binding = reflection.descriptor_bindings[i];

			switch(binding.descriptor_type)
			{
				case SPV_REFLECT_DESCRIPTOR_TYPE_UNIFORM_BUFFER:
				{
					constantBuffers.push_back(binding);
					break;
				}
				case SPV_REFLECT_DESCRIPTOR_TYPE_SAMPLED_IMAGE:
				{
					textures.push_back(binding);
					break;
				}
				case SPV_REFLECT_DESCRIPTOR_TYPE_SAMPLER:
				{
					samplers.push_back(binding);
					break;
				}
				case SPV_REFLECT_DESCRIPTOR_TYPE_STORAGE_BUFFER:
				{
					if (binding.resource_type == SPV_REFLECT_RESOURCE_FLAG_UAV)
					{
						rwStorageBuffers.push_back(binding);
					}
					else
					{
						storageBuffers.push_back(binding);
					}
					break;
				}
				case SPV_REFLECT_DESCRIPTOR_TYPE_STORAGE_IMAGE:
				{
					rwTextures.push_back(binding);
					break;
				}
				case SPV_REFLECT_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER:
				{
					typedBuffers.push_back(binding);
					break;
				}
				case SPV_REFLECT_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER:
				{
					rwTypedBuffers.push_back(binding);
					break;
				}
				default:
				{
					printf("Unrecognized!");
				}
			}
		}
	}

	crstl::vector<SpvReflectDescriptorBinding> constantBuffers;
	crstl::vector<SpvReflectDescriptorBinding> samplers;
	crstl::vector<SpvReflectDescriptorBinding> textures;
	crstl::vector<SpvReflectDescriptorBinding> rwTextures;
	crstl::vector<SpvReflectDescriptorBinding> storageBuffers;
	crstl::vector<SpvReflectDescriptorBinding> rwStorageBuffers;
	crstl::vector<SpvReflectDescriptorBinding> typedBuffers;
	crstl::vector<SpvReflectDescriptorBinding> rwTypedBuffers;

	//std::crstl::vector<SpvReflectDescriptorBinding> stageInputs;
	//std::crstl::vector<SpvReflectDescriptorBinding> stageOutputs;
	//std::crstl::vector<SpvReflectDescriptorBinding> subpassInputs;
	//std::crstl::vector<SpvReflectDescriptorBinding> atomicCounters;
	//std::crstl::vector<SpvReflectDescriptorBinding> accelerationStructures;
	//std::crstl::vector<SpvReflectDescriptorBinding> pushConstantBuffers;
};

bool CrShaderMetadataBuilder::BuildSPIRVMetadata
(
	const crstl::vector<uint32_t>& spirvBytecode,
	crstl::string& metadataHeader, crstl::string& metadataCpp,
	crstl::string& compilationStatus
)
{
	// This needs to be kept alive
	spv_reflect::ShaderModule spvReflectModule(spirvBytecode.size_bytes(), spirvBytecode.data());

	if (spvReflectModule.GetResult() != SPV_REFLECT_RESULT_SUCCESS)
	{
		compilationStatus += "Invalid reflection";
		return false;
	}

	HLSLResources resources(spvReflectModule.GetShaderModule());

	//------------------
	// Build header file
	//------------------

	metadataHeader = AutoGeneratedDisclaimer;

	//metadataHeader += "namespace crshader\n{\n";

	metadataHeader += "#pragma once\n\n";

	// Maybe there is a better way of not writing these headers directly. They depend on the physical
	// structure of the code which can change
	metadataHeader += "#include \"crstl/array.h\"\n";
	metadataHeader += "#include \"Core/Containers/CrHashMap.h\"\n";
	metadataHeader += "#include \"crstl/vector.h\"\n";
	metadataHeader += "#include \"crstl/string.h\"\n";
	metadataHeader += "#include \"Rendering/CrRenderingVector.h\"\n";
	metadataHeader += "\n";

	metadataHeader += BuildConstantBufferMetadataHeader(resources);

	metadataHeader += BuildSamplerMetadataHeader(resources);

	metadataHeader += BuildTextureMetadataHeader(resources);

	metadataHeader += BuildRWTextureMetadataHeader(resources);

	metadataHeader += BuildStorageBufferMetadataHeader(resources);

	metadataHeader += BuildRWStorageBufferMetadataHeader(resources);

	metadataHeader += BuildTypedBufferMetadataHeader(resources);

	metadataHeader += BuildRWTypedBufferMetadataHeader(resources);

	//metadataHeader += "}\n";

	//---------------
	// Build cpp file
	//---------------

	metadataCpp = AutoGeneratedDisclaimer;
	
	// Maybe there is a better way of not writing these headers directly. They depend on the physical
	// structure of the code which can change
	metadataCpp += "#include \"Rendering/CrRendering_pch.h\"\n";
	metadataCpp += "#include \"ShaderMetadata.h\"\n\n";
	metadataCpp += "\n";

	metadataCpp += BuildConstantBufferMetadataCpp(resources);

	metadataCpp += BuildSamplerMetadataCpp(resources);

	metadataCpp += BuildTextureMetadataCpp(resources);

	metadataCpp += BuildRWTextureMetadataCpp(resources);

	metadataCpp += BuildStorageBufferMetadataCpp(resources);

	metadataCpp += BuildRWStorageBufferMetadataCpp(resources);

	metadataCpp += BuildTypedBufferMetadataCpp(resources);

	metadataCpp += BuildRWTypedBufferMetadataCpp(resources);

	return true;
}

crstl::string CrShaderMetadataBuilder::BuildConstantBufferMetadataHeader(const HLSLResources& resources)
{
	crstl::string result;

	result += ConstantBufferSection;

	// 1. Print an enum with all the constant buffers, assigning them an index
	result += PrintResourceEnum("ConstantBuffer", resources.constantBuffers);

	// 2. For every constant buffer, print the data that defines it
	for (uint32_t uniformBufferIndex = 0; uniformBufferIndex < resources.constantBuffers.size(); ++uniformBufferIndex)
	{
		const SpvReflectDescriptorBinding& uniformBuffer = resources.constantBuffers[uniformBufferIndex];
		
		uint32_t indentationLevel = 0;

		crstl::string constantBufferName = crstl::string(uniformBuffer.name) != "" ? uniformBuffer.name : uniformBuffer.type_description->type_name;

		for (uint32_t memberIndex = 0; memberIndex < uniformBuffer.type_description->member_count; ++memberIndex)
		{
			const SpvReflectTypeDescription& member = uniformBuffer.type_description->members[memberIndex];
			result += PrintMemberStruct(member, constantBufferName + "Data", "", indentationLevel);
		}

		result += PrintConstantBufferStructMetadata(constantBufferName, uniformBufferIndex);
	}

	result += PrintConstantBufferMetadataStructDeclaration();

	result += PrintResourceMetadataInstanceDeclaration("ConstantBuffer", resources.constantBuffers);

	//result += PrintConstantBufferGlobalGroupDeclaration(resources.constantBuffers);

	result += "extern CrHashMap<crstl::string, ConstantBufferMetadata&> ConstantBufferTable;\n\n";

	result += "extern crstl::array<ConstantBufferMetadata, " + crstl::string(resources.constantBuffers.size()) + crstl::string("> ConstantBufferMetaTable;\n\n");

	return result;
}

crstl::string CrShaderMetadataBuilder::BuildConstantBufferMetadataCpp(const HLSLResources& resources)
{
	crstl::string result;

	result += ConstantBufferSection;

	result += PrintConstantBufferMetadataInstanceDefinition(resources.constantBuffers);

	result += PrintResourceHashmap("ConstantBuffer", resources.constantBuffers);

	return result;
}

crstl::string CrShaderMetadataBuilder::PrintResourceEnum(const crstl::string& resourceTypeName, const ResourceVector& resources)
{
	crstl::string result;
	result += "namespace " + resourceTypeName + "s\n{\n\tenum T : uint8_t\n\t{";

	for (uint32_t i = 0; i < resources.size(); ++i)
	{
		const SpvReflectDescriptorBinding& resource = resources[i];
		crstl::string resourceName = crstl::string(resource.name) == "" ? resource.type_description->type_name : resource.name;
		result += "\n\t\t" + resourceName + " = " + crstl::string(i) + ",";
	}

	result += "\n\t\tCount\n\t};\n};\n\n";
	return result;
}

crstl::string CrShaderMetadataBuilder::PrintResourceHashmap(const crstl::string& resourceTypeName, const ResourceVector& resources)
{
	crstl::string result;
	result += "CrHashMap<crstl::string, " + resourceTypeName + "Metadata&> " + resourceTypeName + "Table =\n{";

	for (const auto& resource : resources)
	{
		crstl::string resourceName = crstl::string(resource.name) == "" ? resource.type_description->type_name : resource.name;
		result += "\n\t{ \"" + resourceName + "\", " + resourceName + "MetaInstance },";
	}
	result += "\n};\n\n";

	result += "crstl::array<" + resourceTypeName + "Metadata, " + crstl::string(resources.size()) + "> " + resourceTypeName + "MetaTable =\n{";

	for (const auto& resource : resources)
	{
		crstl::string resourceName = crstl::string(resource.name) == "" ? resource.type_description->type_name : resource.name;
		result += "\n\t" + resourceName + "MetaInstance,";
	}
	result += "\n};\n\n";

	return result;
}

crstl::string GetBuiltinTypeString(const SpvReflectTypeDescription& type)
{
	crstl::string result;

	bool isComplexType = 
		(type.type_flags & SPV_REFLECT_TYPE_FLAG_MATRIX) ||
		(type.type_flags & SPV_REFLECT_TYPE_FLAG_VECTOR);

	if (isComplexType)
	{
		result += "cr3d::";
	}

	if (type.type_flags & SPV_REFLECT_TYPE_FLAG_FLOAT)
	{
		result += "float";
	}
	else if (type.type_flags & SPV_REFLECT_TYPE_FLAG_INT)
	{
		if (type.traits.numeric.scalar.signedness != 0)
		{
			result += "int";
		}
		else
		{
			if (type.traits.numeric.vector.component_count > 1)
			{
				result += "uint";
			}
			else
			{
				result += "uint32_t";
			}
		}
	}
	else if (type.type_flags & SPV_REFLECT_TYPE_FLAG_BOOL)
	{
		result += "bool";
	}

	if (type.type_flags & SPV_REFLECT_TYPE_FLAG_MATRIX)
	{
		// In SPIR-V, columns and rows are swapped with respect to HLSL.
		// There are good explanations here as to why this is the case
		// https://github.com/microsoft/DirectXShaderCompiler/blob/master/docs/SPIR-V.rst#vectors-and-matrices
		// https://github.com/microsoft/DirectXShaderCompiler/blob/master/docs/SPIR-V.rst#appendix-a-matrix-representation
		result += crstl::string(type.traits.numeric.matrix.column_count) + "x" + crstl::string(type.traits.numeric.matrix.row_count);
	}
	else if (type.type_flags & SPV_REFLECT_TYPE_FLAG_VECTOR)
	{
		result += crstl::string(type.traits.numeric.vector.component_count);
	}

	return result;
}

crstl::string CrShaderMetadataBuilder::PrintMemberBuiltIn(const SpvReflectTypeDescription& type, const crstl::string& memberName, const crstl::string& indentation)
{
	crstl::string result;

	result += indentation;

	result += GetBuiltinTypeString(type);

	result += " " + memberName;

	// Add array dimensions
	for(uint32_t i = 0; i < type.traits.array.dims_count; ++i)
	{
		result += "[" + crstl::string(type.traits.array.dims[i]) + "]";
	}

	result += ";\n";
	return result;
}

crstl::string CrShaderMetadataBuilder::PrintMemberStruct(const SpvReflectTypeDescription& type, const crstl::string& structTypeName, const crstl::string& structName, uint32_t indentationLevel)
{
	crstl::string result;
	crstl::string structIndentation;

	for (uint32_t i = 0; i < indentationLevel; ++i)
	{
		structIndentation += "\t";
	}

	result += structIndentation + "struct " + structTypeName + "\n" + structIndentation + "{\n"; // Open the struct

	crstl::string memberIndentation = structIndentation + "\t";

	for (uint32_t i = 0; i < type.member_count; ++i)
	{
		const SpvReflectTypeDescription& member = type.members[i];

		switch (member.op)
		{
			case SpvOpTypeStruct:
			{
				result += PrintMemberStruct(member, member.type_name, member.struct_member_name, indentationLevel + 1);
				break;
			}
			default:
			{
				result += PrintMemberBuiltIn(member, member.struct_member_name, memberIndentation);
				break;
			}
		}
	}

	result += structIndentation + "};\n\n"; // Close the struct

	if (structName != "")
	{
		result += structIndentation + structTypeName + " " + structName + ";\n"; // Declare a variable of the struct with a given name
	}

	return result;
}

crstl::string CrShaderMetadataBuilder::PrintResourceMetadataInstanceDeclaration(const crstl::string& resourceType, const ResourceVector& resources)
{
	crstl::string result;
	for (const SpvReflectDescriptorBinding& resource : resources)
	{
		crstl::string resourceName = crstl::string(resource.name) == "" ? resource.type_description->type_name : resource.name;
		result += "extern " + resourceType + "Metadata " + resourceName + "MetaInstance;\n";
	}

	result += "extern " + resourceType + "Metadata Invalid" + resourceType + "MetaInstance;\n";
	return result + "\n";
}

crstl::string CrShaderMetadataBuilder::PrintConstantBufferStructMetadata(const crstl::string& name, int index)
{
	crstl::string result;
	result += "struct " + name + " : public " + name + "Data\n{\n";
	result += "\tusing Data = " + name + "Data;\n";
	result += "\tenum { size = sizeof(" + name + "Data) };\n";
	result += "\tenum { index = " + crstl::string(index) + " };\n";
	result += "};\n\n";
	return result;
}

crstl::string CrShaderMetadataBuilder::PrintConstantBufferMetadataStructDeclaration()
{
	crstl::string result = "struct ConstantBufferMetadata" \
		"\n{\n" \
		"\tConstantBufferMetadata(uint32_t id, uint32_t size) : id(static_cast<ConstantBuffers::T>(id)), size(size) {}\n" \
		"\tconst ConstantBuffers::T id;\n" \
		"\tconst uint32_t size;\n" \
		"};\n\n";
	return result;
}

crstl::string CrShaderMetadataBuilder::PrintConstantBufferMetadataInstanceDefinition(const ResourceVector& uniformBuffers)
{
	crstl::string result;
	for (const SpvReflectDescriptorBinding& uniformBuffer : uniformBuffers)
	{
		crstl::string name = crstl::string(uniformBuffer.name) == "" ? uniformBuffer.type_description->type_name : uniformBuffer.name;
		auto scopedMeta = [&](const crstl::string& member) { return name + "::" + member; }; // Convenience lambda
		result += "ConstantBufferMetadata " + name + "MetaInstance(" + scopedMeta("index, ") + scopedMeta("size") + ");\n";
	}
	result += "ConstantBufferMetadata InvalidConstantBufferMetaInstance(UINT32_MAX, 0);\n";
	return result + "\n";
}

crstl::string CrShaderMetadataBuilder::BuildTextureMetadataHeader(const HLSLResources& resources)
{
	crstl::string result;

	result += TextureSection;

	result += PrintResourceEnum("Texture", resources.textures);

	result += PrintTextureMetadataStructDeclaration();

	result += PrintResourceMetadataInstanceDeclaration("Texture", resources.textures);

	result += "extern CrHashMap<crstl::string, TextureMetadata&> TextureTable;\n\n";

	result += "extern crstl::array<TextureMetadata, " + crstl::string(resources.textures.size()) + "> TextureMetaTable;\n\n";

	return result;
}

crstl::string CrShaderMetadataBuilder::BuildTextureMetadataCpp(const HLSLResources& resources)
{
	crstl::string result;

	result += TextureSection;

	result += PrintTextureMetadataInstanceDefinition(resources.textures);

	result += PrintResourceHashmap("Texture", resources.textures);

	return result;
}

crstl::string CrShaderMetadataBuilder::PrintTextureMetadataStructDeclaration()
{
	crstl::string result = "struct TextureMetadata" \
		"\n{\n" \
		"\tTextureMetadata(uint32_t id) : id(static_cast<Textures::T>(id)) {}\n" \
		"\tconst Textures::T id;\n" \
		"};\n\n";
	return result;
}

crstl::string CrShaderMetadataBuilder::PrintTextureMetadataInstanceDefinition(const ResourceVector& textures)
{
	crstl::string result;
	for (const auto& texture : textures)
	{
		result += "TextureMetadata " + crstl::string(texture.name) + "MetaInstance(" + "Textures::" + crstl::string(texture.name) + ");\n";
	}
	result += "TextureMetadata InvalidTextureMetaInstance(UINT32_MAX);\n";
	return result + "\n";
}

crstl::string CrShaderMetadataBuilder::BuildSamplerMetadataHeader(const HLSLResources& resources)
{
	crstl::string result;

	result += SamplerSection;

	result += PrintResourceEnum("Sampler", resources.samplers);

	result += PrintSamplerMetadataStructDeclaration();

	result += PrintResourceMetadataInstanceDeclaration("Sampler", resources.samplers);

	result += "extern CrHashMap<crstl::string, SamplerMetadata&> SamplerTable;\n\n";

	result += "extern crstl::array<SamplerMetadata, " + crstl::string(resources.samplers.size()) + "> SamplerMetaTable;\n\n";

	return result;
}

crstl::string CrShaderMetadataBuilder::BuildSamplerMetadataCpp(const HLSLResources& resources)
{
	crstl::string result;

	result += SamplerSection;

	result += PrintSamplerMetadataInstanceDefinition(resources.samplers);

	result += PrintResourceHashmap("Sampler", resources.samplers);

	return result;
}

crstl::string CrShaderMetadataBuilder::PrintSamplerMetadataStructDeclaration()
{
	crstl::string result = "struct SamplerMetadata" \
		"\n{\n" \
		"\tSamplerMetadata(uint32_t id) : id(static_cast<Samplers::T>(id)) {}\n" \
		"\tconst Samplers::T id;\n" \
		"};\n\n";
	return result;
}

crstl::string CrShaderMetadataBuilder::PrintSamplerMetadataInstanceDefinition(const ResourceVector& samplers)
{
	crstl::string result;
	for (const auto& sampler : samplers) { result += "SamplerMetadata " + crstl::string(sampler.name) + "MetaInstance(" + "Samplers::" + crstl::string(sampler.name) + ");\n"; }
	result += "SamplerMetadata InvalidSamplerMetaInstance(UINT32_MAX);\n";
	return result + "\n";
}

crstl::string CrShaderMetadataBuilder::BuildRWTextureMetadataHeader(const HLSLResources& resources)
{
	crstl::string result;

	result += RWTextureSection;

	result += PrintResourceEnum("RWTexture", resources.rwTextures);

	result += PrintRWTextureMetadataStructDeclaration();

	result += PrintResourceMetadataInstanceDeclaration("RWTexture", resources.rwTextures);

	result += "extern CrHashMap<crstl::string, RWTextureMetadata&> RWTextureTable;\n\n";

	result += "extern crstl::array<RWTextureMetadata, " + crstl::string(resources.rwTextures.size()) + "> RWTextureMetaTable;\n\n";

	return result;
}

crstl::string CrShaderMetadataBuilder::BuildRWTextureMetadataCpp(const HLSLResources& resources)
{
	crstl::string result;

	result += RWTextureSection;

	result += PrintRWTextureMetadataInstanceDefinition(resources.rwTextures);

	result += PrintResourceHashmap("RWTexture", resources.rwTextures);

	return result;
}

crstl::string CrShaderMetadataBuilder::PrintRWTextureMetadataInstanceDefinition(const ResourceVector& rwTextures)
{
	crstl::string result;
	for (const auto& rwTexture : rwTextures)
	{
		result += "RWTextureMetadata " + crstl::string(rwTexture.name) + "MetaInstance(" + "RWTextures::" + crstl::string(rwTexture.name) + ");\n";
	}
	result += "RWTextureMetadata InvalidRWTextureMetaInstance(UINT32_MAX);\n";
	return result + "\n";
}

crstl::string CrShaderMetadataBuilder::PrintRWTextureMetadataStructDeclaration()
{
	crstl::string result = "struct RWTextureMetadata" \
		"\n{\n" \
		"\tRWTextureMetadata(uint32_t id) : id(static_cast<RWTextures::T>(id)) {}\n" \
		"\tconst RWTextures::T id;\n" \
		"};\n\n";
	return result;
}

crstl::string CrShaderMetadataBuilder::BuildStorageBufferMetadataStruct(const crstl::string bufferName, uint32_t index, const SpvReflectTypeDescription& member, bool rw)
{
	crstl::string result;

	const crstl::string rwString = rw ? "RW" : "";

	bool isMemberStruct = member.type_flags & SPV_REFLECT_TYPE_FLAG_STRUCT;

	// Print the struct we are going to derive from that contains the relevant members
	if (isMemberStruct)
	{
		uint32_t indentationLevel = 0;
		result += PrintMemberStruct(member, bufferName + "Data", "", indentationLevel);
	}

	// Print the struct that contains the metadata and is actually used in engine
	result += "template<>\n";
	result += "struct " + rwString + "StorageBufferDataStruct<" + rwString + "StorageBuffers::" + bufferName + ">";

	if (isMemberStruct)
	{
		result += " : public " + bufferName + "Data\n{\n";
		result += "\tusing Data = " + bufferName + "Data;\n";
		result += "\tenum { stride = sizeof(" + bufferName + "Data) };\n";
	}
	else
	{
		crstl::string typeString = GetBuiltinTypeString(member);
		result += "\n{\n";
		result += "\tusing Data = " + typeString + ";\n";
		result += "\tenum { stride = sizeof(" + typeString + ") };\n";
	}

	result += "\tenum { index = " + crstl::string(index) + " };\n";
	result += "}; typedef " + rwString + "StorageBufferDataStruct<" + rwString + "StorageBuffers::" + bufferName + "> " + bufferName + ";\n\n";

	return result;
}

crstl::string CrShaderMetadataBuilder::BuildStorageBufferMetadataHeader(const HLSLResources& resources)
{
	crstl::string result;

	result += StorageBufferSection;

	result += PrintResourceEnum("StorageBuffer", resources.storageBuffers);

	// Print the template
	result += "template<enum StorageBuffers::T index>\nstruct StorageBufferDataStruct {};\n\n";

	for (uint32_t storageBufferIndex = 0; storageBufferIndex < resources.storageBuffers.size(); ++storageBufferIndex)
	{
		const SpvReflectDescriptorBinding& storageBuffer = resources.storageBuffers[storageBufferIndex];
		result += BuildStorageBufferMetadataStruct(storageBuffer.name, storageBufferIndex, storageBuffer.type_description->members[0], false);
	}

	result += PrintStorageBufferMetadataStructDeclaration();

	result += PrintResourceMetadataInstanceDeclaration("StorageBuffer", resources.storageBuffers);

	result += "extern CrHashMap<crstl::string, StorageBufferMetadata&> StorageBufferTable;\n\n";

	result += "extern crstl::array<StorageBufferMetadata, " + crstl::string(resources.storageBuffers.size()) + "> StorageBufferMetaTable;\n\n";

	return result;
}

crstl::string CrShaderMetadataBuilder::BuildStorageBufferMetadataCpp(const HLSLResources& resources)
{
	crstl::string result;

	result += StorageBufferSection;

	result += PrintStorageBufferMetadataInstanceDefinition(resources.storageBuffers);

	result += PrintResourceHashmap("StorageBuffer", resources.storageBuffers);

	return result;
}

crstl::string CrShaderMetadataBuilder::PrintStorageBufferMetadataInstanceDefinition(const ResourceVector& storageBuffers)
{
	crstl::string result;
	for (const auto& storageBuffer : storageBuffers)
	{
		crstl::string name = crstl::string(storageBuffer.name);
		auto scopedMeta = [&](const crstl::string& member) { return name + "::" + member; }; // Convenience lambda
		result += "StorageBufferMetadata " + name + "MetaInstance(" + scopedMeta("index, ") + scopedMeta("stride") + ");\n";
	}
	result += "StorageBufferMetadata InvalidStorageBufferMetaInstance(UINT32_MAX, 0);\n";
	return result + "\n";
}

crstl::string CrShaderMetadataBuilder::PrintStorageBufferMetadataStructDeclaration()
{
	crstl::string result = "struct StorageBufferMetadata"
		"\n{\n"
		"\tStorageBufferMetadata(uint32_t id, uint32_t stride) : id(static_cast<StorageBuffers::T>(id)), stride(stride) {}\n"
		"\tconst StorageBuffers::T id;\n"
		"\tconst uint32_t stride;\n"
		"};\n\n";
	return result;
}

crstl::string CrShaderMetadataBuilder::BuildRWStorageBufferMetadataHeader(const HLSLResources& resources)
{
	crstl::string result;

	result += RWStorageBufferSection;

	result += PrintResourceEnum("RWStorageBuffer", resources.rwStorageBuffers);

	// Print the template
	result += "template<enum RWStorageBuffers::T index>\nstruct RWStorageBufferDataStruct {};\n\n";

	for (uint32_t rwStorageBufferIndex = 0; rwStorageBufferIndex < resources.rwStorageBuffers.size(); ++rwStorageBufferIndex)
	{
		const SpvReflectDescriptorBinding& rwStorageBuffer = resources.rwStorageBuffers[rwStorageBufferIndex];
		result += BuildStorageBufferMetadataStruct(rwStorageBuffer.name, rwStorageBufferIndex, rwStorageBuffer.type_description->members[0], true);
	}

	result += PrintRWStorageBufferMetadataStructDeclaration();

	result += PrintResourceMetadataInstanceDeclaration("RWStorageBuffer", resources.rwStorageBuffers);

	result += "extern CrHashMap<crstl::string, RWStorageBufferMetadata&> RWStorageBufferTable;\n\n";

	result += "extern crstl::array<RWStorageBufferMetadata, " + crstl::string(resources.rwStorageBuffers.size()) + "> RWStorageBufferMetaTable;\n\n";

	return result;
}

crstl::string CrShaderMetadataBuilder::BuildRWStorageBufferMetadataCpp(const HLSLResources& resources)
{
	crstl::string result;

	result += RWStorageBufferSection;

	result += PrintRWStorageBufferMetadataInstanceDefinition(resources.rwStorageBuffers);

	result += PrintResourceHashmap("RWStorageBuffer", resources.rwStorageBuffers);

	return result;
}

crstl::string CrShaderMetadataBuilder::PrintRWStorageBufferMetadataInstanceDefinition(const ResourceVector& rwStorageBuffers)
{
	crstl::string result;
	for (const auto& rwStorageBuffer : rwStorageBuffers)
	{
		crstl::string name = crstl::string(rwStorageBuffer.name);
		auto scopedMeta = [&](const crstl::string& member) { return name + "::" + member; }; // Convenience lambda
		result += "RWStorageBufferMetadata " + name + "MetaInstance(" + scopedMeta("index, ") + scopedMeta("stride") + ");\n";
	}
	result += "RWStorageBufferMetadata InvalidRWStorageBufferMetaInstance(UINT32_MAX, 0);\n";
	return result + "\n";
}

crstl::string CrShaderMetadataBuilder::PrintRWStorageBufferMetadataStructDeclaration()
{
	crstl::string result = "struct RWStorageBufferMetadata" \
		"\n{\n" \
		"\tRWStorageBufferMetadata(uint32_t id, uint32_t stride) : id(static_cast<RWStorageBuffers::T>(id)), stride(stride) {}\n" \
		"\tconst RWStorageBuffers::T id;\n" \
		"\tconst uint32_t stride;\n" \
		"};\n\n";
	return result;
}

crstl::string CrShaderMetadataBuilder::BuildTypedBufferMetadataHeader(const HLSLResources& resources)
{
	crstl::string result;

	result += TypedBufferSection;

	result += PrintResourceEnum("TypedBuffer", resources.typedBuffers);

	result += PrintTypedBufferMetadataStructDeclaration();

	result += PrintResourceMetadataInstanceDeclaration("TypedBuffer", resources.typedBuffers);

	result += "extern CrHashMap<crstl::string, TypedBufferMetadata&> TypedBufferTable;\n\n";

	result += "extern crstl::array<TypedBufferMetadata, " + crstl::string(resources.typedBuffers.size()) + "> TypedBufferMetaTable;\n\n";

	return result;
}

crstl::string CrShaderMetadataBuilder::BuildTypedBufferMetadataCpp(const HLSLResources& resources)
{
	crstl::string result;

	result += TypedBufferSection;

	result += PrintTypedBufferMetadataInstanceDefinition(resources.typedBuffers);

	result += PrintResourceHashmap("TypedBuffer", resources.typedBuffers);

	return result;
}

crstl::string CrShaderMetadataBuilder::PrintTypedBufferMetadataInstanceDefinition(const ResourceVector& typedBuffers)
{
	crstl::string result;
	for (const auto& typedBuffer : typedBuffers)
	{
		result += "TypedBufferMetadata " + crstl::string(typedBuffer.name) + "MetaInstance(" + "TypedBuffers::" + crstl::string(typedBuffer.name) + ");\n";
	}
	result += "TypedBufferMetadata InvalidTypedBufferMetaInstance(UINT32_MAX);\n";
	return result + "\n";
}

crstl::string CrShaderMetadataBuilder::PrintTypedBufferMetadataStructDeclaration()
{
	crstl::string result = "struct TypedBufferMetadata" \
		"\n{\n" \
		"\tTypedBufferMetadata(uint32_t id) : id(static_cast<TypedBuffers::T>(id)) {}\n" \
		"\tconst TypedBuffers::T id;\n" \
		"};\n\n";
	return result;
}

crstl::string CrShaderMetadataBuilder::BuildRWTypedBufferMetadataHeader(const HLSLResources& resources)
{
	crstl::string result;

	result += RWTypedBufferSection;

	result += PrintResourceEnum("RWTypedBuffer", resources.rwTypedBuffers);

	result += PrintRWTypedBufferMetadataStructDeclaration();

	result += PrintResourceMetadataInstanceDeclaration("RWTypedBuffer", resources.rwTypedBuffers);

	result += "extern CrHashMap<crstl::string, RWTypedBufferMetadata&> RWTypedBufferTable;\n\n";

	result += "extern crstl::array<RWTypedBufferMetadata, " + crstl::string(resources.rwTypedBuffers.size()) + "> RWTypedBufferMetaTable;\n\n";

	return result;
}

crstl::string CrShaderMetadataBuilder::BuildRWTypedBufferMetadataCpp(const HLSLResources& resources)
{
	crstl::string result;

	result += RWTypedBufferSection;

	result += PrintRWTypedBufferMetadataInstanceDefinition(resources.rwTypedBuffers);

	result += PrintResourceHashmap("RWTypedBuffer", resources.rwTypedBuffers);

	return result;
}

crstl::string CrShaderMetadataBuilder::PrintRWTypedBufferMetadataInstanceDefinition(const ResourceVector& rwTypedBuffers)
{
	crstl::string result;
	for (const auto& rwTypedBuffer : rwTypedBuffers)
	{
		result += "RWTypedBufferMetadata " + crstl::string(rwTypedBuffer.name) + "MetaInstance(" + "RWTypedBuffers::" + crstl::string(rwTypedBuffer.name) + ");\n";
	}
	result += "RWTypedBufferMetadata InvalidRWTypedBufferMetaInstance(UINT32_MAX);\n";
	return result + "\n";
}

crstl::string CrShaderMetadataBuilder::PrintRWTypedBufferMetadataStructDeclaration()
{
	crstl::string result = "struct RWTypedBufferMetadata" \
		"\n{\n" \
		"\tRWTypedBufferMetadata(uint32_t id) : id(static_cast<RWTypedBuffers::T>(id)) {}\n" \
		"\tconst RWTypedBuffers::T id;\n" \
		"};\n\n";
	return result;
}